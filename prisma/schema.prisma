// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AIModel {
  id          String   @id @default(cuid())
  name        String
  description String
  personality String
  tone        String
  gender      String?
  mbti        String?
  age         Int?
  status      String   @default("training") // "training" | "ready" | "error"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  apiKey      String?  @unique
  ownerId     String?
  
  // Training data
  textSamples  Int @default(0)
  voiceSamples Int @default(0)
  imageSamples Int @default(0)
  
  // Relations
  allowedGroups AIModelGroup[]
  posts         ContentPost[]
  
  @@map("ai_models")
}

model AIModelGroup {
  id        String   @id @default(cuid())
  modelId   String
  groupName String
  
  model AIModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@unique([modelId, groupName])
  @@map("ai_model_groups")
}

model ContentPost {
  id          String   @id @default(cuid())
  modelId     String
  title       String
  content     String
  platform    String   @default("Instagram")
  status      String   @default("draft") // "draft" | "scheduled" | "published"
  publishedAt DateTime?
  scheduledAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Engagement metrics
  likes    Int @default(0)
  comments Int @default(0)
  shares   Int @default(0)
  views    Int @default(0)
  
  // Relations
  model AIModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
  hashtags PostHashtag[]
  images   PostImage[]
  
  @@map("content_posts")
}

model PostHashtag {
  id    String @id @default(cuid())
  postId String
  tag   String
  
  post ContentPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([postId, tag])
  @@map("post_hashtags")
}

model PostImage {
  id     String @id @default(cuid())
  postId String
  url    String
  alt    String?
  
  post ContentPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("post_images")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  company      String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  models AIModel[]
  
  @@map("users")
} 